<?php
namespace Test\Entities;

use App\Entities\ChildEntity;
use Mockery as m;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-09-22 at 07:29:26.
 */
class ChildEntityTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ChildEntity
     */
    protected $object;

    /**
     * @var Mockery(Child)
     */
    protected $mock;

    /**
     * @var array Childデータ
     */
    protected $value = [
        'id' => 1,
        'name' => 'phpunit',
        'email' => 'inaka.phper+phpunit@gmail.com',
        'password' => 'secret',
        'remember_token' => null,
    ];

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->mock = m::mock('Eloquent', 'App\Child', $this->value);
        $this->object = new ChildEntity($this->mock);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        m::close();
    }

    /**
     * @covers App\Entities\ChildEntity::getChild
     */
    public function testGetModel()
    {
        $this->assertInstanceOf('App\Child', $this->object->getModel());
    }

    /**
     * @covers App\Entities\ChildEntity::setChild
     */
    public function testSetModel()
    {
        $this->assertInstanceOf('App\Entities\ChildEntity', $this->object->setModel($this->mock));
    }

    /**
     * @covers App\Entities\ChildEntity::create
     */
    public function testCreate()
    {
        $this->mock
            ->shouldReceive('fill')->andReturn($this->mock)
            ->shouldReceive('save')->andReturn(true)
            ->shouldReceive('setAttribute')
            ->shouldReceive('getModel')->andReturn($this->mock)
            ->shouldReceive('newInstance')->andReturn($this->object);

        $user = m::mock('UserEntityable', 'App\Contracts\UserEntityable');
        $user->id = 1;

        $this->assertTrue($this->object->create($user, $this->value));
    }

    /**
     * @covers App\Entities\ChildEntity::find
     */
    public function testFind()
    {
        $this->mock->shouldReceive('findOrFail')->andReturn($this->mock);

        $this->assertInstanceOf('App\Entities\ChildEntity', $this->object->find(1));
    }

    /**
     * @convers AppEntities\ChildEntity::all
     */
    public function testAll()
    {
        $collection = m::mock('Collection');
        $this->mock->shouldReceive('all')->andReturn($collection);

        $this->assertInstanceOf('Collection', $this->object->all());
    }

    /**
     * @convers AppEntities\ChildEntity::paginate
     */
    public function testPaginate()
    {
        $collection = m::mock('Paginator');
        $this->mock->shouldReceive('paginate')->andReturn($collection);

        $this->assertInstanceOf('Paginator', $this->object->paginate());
    }

    /**
     * @covers App\Entities\ChildEntity::toArray
     */
    public function testToArray()
    {
        $this->mock->shouldReceive('toArray')->andReturn($this->value);

        $this->assertEquals($this->value, $this->object->toArray());
    }

    /**
     * @covers App\Entities\ChildEntity::toJson
     */
    public function testToJson()
    {
        $this->mock->shouldReceive('toJson')->andReturn(json_encode($this->value));

        $this->assertEquals(json_encode($this->value), $this->object->toJson());
    }
}
