<?php
namespace Test\Entities;

use App\Entities\UserEntity;
use App\User;
use Mockery as m;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-09-22 at 07:29:26.
 */
class UserEntityTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var UserEntity
     */
    protected $object;

    /**
     * @var Mockery(User)
     */
    protected $mock;

    /**
     * @var array Userデータ
     */
    protected $value = [
        'id' => 1,
        'name' => 'phpunit',
        'email' => 'inaka.phper+phpunit@gmail.com',
        'password' => 'secret',
        'remember_token' => null,
    ];

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->mock = m::mock('Eloquent', 'App\User', $this->value);
        $this->object = new UserEntity($this->mock);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        m::close();
    }

    /**
     * @covers App\Entities\UserEntity::getUser
     */
    public function testGetUser()
    {
        $this->assertInstanceOf('App\User', $this->object->getUser());
    }

    /**
     * @covers App\Entities\UserEntity::setUser
     */
    public function testSetUser()
    {
        $this->assertInstanceOf('App\Entities\UserEntity', $this->object->setUser($this->mock));
    }

    /**
     * @covers App\Entities\UserEntity::create
     */
    public function testCreate()
    {
        $this->mock
            ->shouldReceive('fill')->andReturn(m::self())
            ->shouldReceive('newInstance')->andReturn(m::self())
            ->shouldReceive('save')->andReturn(true);

        $this->assertTrue($this->object->create($this->value));
    }

    /**
     * @covers App\Entities\UserEntity::find
     */
    public function testFind()
    {
        $this->mock->shouldReceive('findOrFail')->andReturn(m::self());

        $this->assertInstanceOf('App\Entities\UserEntity', $this->object->find(1));
    }

    /**
     * @covers App\Entities\UserEntity::toArray
     */
    public function testToArray()
    {
        $this->mock->shouldReceive('toArray')->andReturn($this->value);

        $this->assertEquals($this->value, $this->object->toArray());
    }

    /**
     * @covers App\Entities\UserEntity::toJson
     */
    public function testToJson()
    {
        $this->mock->shouldReceive('toJson')->andReturn(json_encode($this->value));

        $this->assertEquals(json_encode($this->value), $this->object->toJson());
    }
}
